{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"advanced/","text":"Advanced This section will be covering some advanced topics related to Macron's nature and the nature of developing desktop applications. Details coming soon...","title":"Advanced"},{"location":"advanced/#advanced","text":"This section will be covering some advanced topics related to Macron's nature and the nature of developing desktop applications. Details coming soon...","title":"Advanced"},{"location":"api/","text":"API Reference This section extensively covers (in detail) all the APIs that are common to all native apps. Each entry in this section describes an abstract class that has several static methods. CurrentWindow Methods of the CurrentWindow refer to the window of the caller so accessing the close method on the main window closes the entire app, for instance. Properties None. Methods title Gets/sets the current window's title. CurrentWindow.title([, windowName: string]) Returns windowName: string . clone Clones the current window using the parent window's configurations. CurrentWindow.clone() Returns boolean . Default true . close Closes the current window. CurrentWindow.close() Returns boolean . Default true . width Gets/sets the width of the current window. CurrentWindow.width([, length: number]) Returns width value of the current window. height Gets/sets the height of the current window. CurrentWindow.height([, length: number]) Returns height value of the current window. maxWidth Gets/sets the maximum width of the current window. CurrentWindow.maxWidth([, length: number]) Returns maxWidth value of the current window. maxHeight Gets/sets the maximum height of the current window. CurrentWindow.maxHeight([, length: number]) Returns maxHeight: number . minWidth Gets/sets the minimum width of the current window. CurrentWindow.minWidth([, length: number]) Returns minWidth value of the current window. minHeight Gets/sets the minimum height of the current window. CurrentWindow.minHeight([, length: number]) Returns minHeight value of the current window. resizable Gets/sets resizability of the current window. CurrentWindow.resizable(shouldResize: boolean) Returns resizable value of the current window. Default true . focusOnStartup Gets/sets the whether the current window should be focused when started. CurrentWindow.focusOnStartup(shouldFocus: boolean) Returns focusOnStartup value of the current window. Note This method is only available as a configuration option in a subsequent window created by Window.create() hideInTaskbar Gets/sets whether the current window should be displayed in the taskbar. CurrentWindow.hideInTaskbar(shouldHideInTaskbar: boolean) Returns hideInTaskbar value of the current window. Default false . hideOnStartup Gets/sets whether the current window should be hidden on window startup. CurrentWindow.hideOnStartup(shouldHideOnStartup: boolean) Returns hideOnStartup value of the current window. Default false . startupFromCenter Gets/sets whether the current window should be centerized. CurrentWindow.startupFromCenter(shouldStartupFromCenter: boolean) Returns startupFromCenter value of the current window. Default true . state Gets/sets the current window state which could be one of: 'normal' 'maximized' 'minimized' CurrentWindow.state(state: string) Returns state value of the current window. Default 'normal' . frameless Gets/sets whether the current window should have no outer frame. CurrentWindow.frameless(shouldSetFrameless: boolean) Returns frameless value of the current window. Default 'false' . activate Gets/sets whether the current window should be activated. CurrentWindow.activate(shouldActivate: boolean) Returns activate value of the current window. Default 'true' . focus Gets/sets whether the current window should have a focus. CurrentWindow.focus(shouldSetFocus: boolean) Returns focus value of the current window. Default 'true' . hide Gets/sets whether the current window should be hidden. CurrentWindow.hide(shouldBeHidden: boolean) Returns hide value of the current window. Default 'false' . show Gets/sets whether the current window should be displayed once it's hidden. CurrentWindow.show(shouldShowAfterHide: boolean) Returns show value of the current window. Default 'true' . Window The Window class specifically handles calls to common tasks such as creating new windows that load a different application view, closing windows using numbered IDs and closing all windows. Properties None. Methods create Creates a new window with a new configuration. Window.create(newConfig: object) Returns Window (the new window created). close Closes a window with the specified id . This means a window 5 levels deep can close another window that is 3 levels deep, for instance. All the values of id are indexed starting from 1. Window.close(id: string) Returns boolean . Default true . closeAll Closes all queued windows. Window.closeAll() Returns boolean . Default true . Menubar The menubar is defined in the NodeJS end and is not dynamic. This means no mutations can occur on the menubar once it's set. It is responsible for creating a single menubar before the app starts. It cannot be accessed at runtime (check ContextMenu ). A simple example of a menubar: const { Menubar , Menu } = require ( macron ); module . exports = new Menubar ([ Menu . MenuItem ({ label : File , submenu : [ Menu . MenuItem ({ label : New File , click : function () { console . log ( require ( macron ). Dialog . filePicker ({ title : Pick file... , read : true , initialDirectoryPath : C:/Users/default/Desktop/macron_tests/ , fileTypes : [ [ All files , .* ], [ Text , .txt ], [ HTML , .html ], [ JavaScript , .js ], [ CSS , .css ], [ Markdown , .md ] ] }) ); }), Menu . MenuItem ({ label : New Window }), Menu . Seperator , Menu . MenuItem ({ label : Open File }), Menu . MenuItem ({ label : Open Folder }), Menu . Seperator , Menu . MenuItem ({ label : Open Recent , submenu : [ Menu . MenuItem ({ label : ./views/CodeEditor/index.js }), Menu . MenuItem ({ label : ../components/windows/MenuButton }), Menu . MenuItem ({ label : ./app/scripts/ }), Menu . MenuItem ({ label : ../static/img/logo.png }), Menu . MenuItem ({ label : ../projects/ }) ]}), Menu . Seperator , Menu . MenuItem ({ label : Auto Save , isCheckable : true , checked : true }) ] }), Menu . MenuItem ({ label : Edit , submenu : [ Menu . MenuItem ({ label : Word Wrap , isCheckable : true , click : function ( menuitem ) { console . log ( menuitem ) }}) ]}), Menu . MenuItem ({ label : Selection }), Menu . MenuItem ({ label : View }), Menu . MenuItem ({ label : Go , submenu : [ Menu . MenuItem ({ label : Share , icon : #xE72D; }), Menu . MenuItem ({ label : Copy }), Menu . MenuItem ({ label : Delete }), ]}), Menu . MenuItem ({ label : Debug }), Menu . MenuItem ({ label : Tasks }), Menu . MenuItem ({ label : Help }) ]); Menu Acts as a container for the menu items and seperator. Properties Menu.Seperator Creates a menu seperator. The seperator could appear differently according to the platform. Value: Object . Methods Menu.MenuItem Creates a menu item. Menu.MenuItem(itemConfig: object) itemConfig could have any of the following options: label string - The title of the menu item. click function - Handler for the item's click event. Executed in the web context only. submenu array - List of Menu.MenuItem(itemConfig: object) items to display as children. Default is [] . isCheckable boolean - Whether the item specified can be checked. Default is false . checked boolean - Whether the item specified is checked. Can only work if itemConfig.isCheckable is defined. Default is false . Returns Object . Dialogs The dialogs are a single entity that manipulate all sorts of native popups with a simple common API. Properties None. Methods fileSaver Used to create a native file-saver dialog with some options. A simple example of a file saver dialog something like: require ( macron ). fileSaver ({ title : Save your file... , // Optional. Sets the title of the dialog window. name : build // Required. Name of file to save. initialDirectoryPath : ./dist/ , // Required. Describes where to save the file. defaultExtension : js , // Required. Extension to use to save file. fileTypes : [ [ JavaScript , .js ], [ JavaScript React , .jsx ], ] // Optional. Format to save file. }); Returns path to saved file. filePicker Used to pick a file from a directory. require ( macron ). filePicker ({ title : Save your file... , // Optional. Sets the title of the dialog window. allowMultiPick : true // Required. Allows selection of multiple files to pick. initialDirectoryPath : ./dist/ , // Required. Describes where to save the file. read : false , // Optional. Whether this method should return the file contents of the picked file(s). Default false. fileTypes : [ [ JavaScript, (*.js, *.htc) ], [ JavaScript React (*.jsx) ] ] // Optional. Format to save file. }); Returns the path to the picked file. This path could then be used for other functionalities like reading a file to be displayed in an editor, etc. directoryPicker Used to pick a directory. require ( macron ). directoryPicker ({ title : Select a path , // Optional. Sets the title of the dialog window initialDirectoryPath : ./dist/ , // Required. Describes where to pick the directory from. }); Returns the path to the selected directory. ContextMenu The ContextMenu class is dynamic and can be accessed/mutated at runtime. The API is exactly the same as the Menubar API but the only difference is that ContextMenu can be overidden at any moment in the web context. Example require ( macron ). ContextMenu . register ( #editor-body , [ Menu . MenuItem ({ label : Simple Item }), Menu . MenuItem ({ label : Auto Save , isCheckable : true , checked : true }) ]); Properties None. Methods register ContextMenu.register(queryString: string, menuItems: array) Registers a new ContextMenu instance on the DOM element with the specified queryString . This overrides the element's default context menu bound to the right click (if it does) and instantiates a context menu over the element. Returns the same ContextMenu instance. System Contains information about the underlying machine's platform, architecture, build version, processor, release and other related information. Properties None Methods getPlatform Returns the platform the user's machine is running on or null . This could be one of: 'Windows' 'Linux' 'MacOSX' getMachineVersion Returns the version of the platform the user's machine is running on or null . getMachineType Returns the the user's machine type. getNetworkName Returns the network name of the computer. Not to be confused with NodeJS. getProcessorName Returns the platform's processor name. getRelease Returns the platform's release. javaVersion Returns the version interface for Java platforms Warning This method is expected to be deprecated in future versions since Macron is not expecting to support Java platforms. win32Version Provides extra information on the Windows Registry. Returns an array of: OS release Version number CSD level (service pack) OS type (single/multi processor) macVersion Returns version of MacOS on the user's computer. libcVersion Returns version of Linux on the user's computer. FileSystem The FileSystem API extensively covers all the needs for rapid file prototyping. Common methods for reading, writing, updating, searching, copying and replacing files are defined. However, more intricate functionalities such as file watching are omitted to avoid unnecessary side effects to the general performance. Note Even so, these functionalities are available as plugins. Plugins are expected to make their way to Macron in the coming versions. Properties None Methods Warning All FileSystem methods are synchronous. You could create an asynchronous wrapper over the FileSystem class to gain non-blocking I/O. readFile readFile(path: string) Reads a file's contents and returns it. writeFile Write contents to a file. writeFile(path: string, contents: string) Returns void appendFile Append contents to a file. appendFile(path: string, contents: string) Returns void clearFile Clear contents of a file. clearFile(path: string) Returns boolean . copyFile Copy file from a directory to another directory. copyFile(src: string, to: string) Returns void isFile Checks if the specified path is a file and returns true if the path is a file otherwise false . isFile(path: string) Returns boolean . isDirectory Checks if the specified path is a directory and returns true if the path is a directory otherwise false . isDirectory(path: string) Returns boolean . mkdir Creates a directory if the specified path does not exist. mkdir(path: string) Returns boolean . chdir Changes working directory into specified path. chdir(path: string) Returns boolean . realpath Gets the absolute path of the specified path (usually a relative path). realpath(path: string) Returns string or null . rename Renames a file to a specified new name. rename(oldName: string, newName: string) Returns void . unlink Removes specified file. unlink(path: string) Returns void . rmdir Removes directory (with contents). rmdir(path: string) Returns void . rmdirEmpty Removes directory if it is empty. rmdirEmpty(path: string) Returns void . Note unlink , rmdir and rmdirEmpty remove items permanently (with no cache). Do not use any if you need to do a temporary file-removal action. readDir Reads contents of directory. readDir(path: string) Returns array . readDirGlob Read contents of directory with advanced Unix file patterns. For instance: '*.js' - Matches all files that have a . js extension. '/macron/*.cpp' - Matches all files that have a . cpp extension in a macron folder. readDirGlob(path: string, pattern: string) Returns array .","title":"API Reference"},{"location":"api/#api-reference","text":"This section extensively covers (in detail) all the APIs that are common to all native apps. Each entry in this section describes an abstract class that has several static methods.","title":"API Reference"},{"location":"api/#currentwindow","text":"Methods of the CurrentWindow refer to the window of the caller so accessing the close method on the main window closes the entire app, for instance.","title":"CurrentWindow"},{"location":"api/#properties","text":"None.","title":"Properties"},{"location":"api/#methods","text":"","title":"Methods"},{"location":"api/#title","text":"Gets/sets the current window's title. CurrentWindow.title([, windowName: string]) Returns windowName: string .","title":"title"},{"location":"api/#clone","text":"Clones the current window using the parent window's configurations. CurrentWindow.clone() Returns boolean . Default true .","title":"clone"},{"location":"api/#close","text":"Closes the current window. CurrentWindow.close() Returns boolean . Default true .","title":"close"},{"location":"api/#width","text":"Gets/sets the width of the current window. CurrentWindow.width([, length: number]) Returns width value of the current window.","title":"width"},{"location":"api/#height","text":"Gets/sets the height of the current window. CurrentWindow.height([, length: number]) Returns height value of the current window.","title":"height"},{"location":"api/#maxwidth","text":"Gets/sets the maximum width of the current window. CurrentWindow.maxWidth([, length: number]) Returns maxWidth value of the current window.","title":"maxWidth"},{"location":"api/#maxheight","text":"Gets/sets the maximum height of the current window. CurrentWindow.maxHeight([, length: number]) Returns maxHeight: number .","title":"maxHeight"},{"location":"api/#minwidth","text":"Gets/sets the minimum width of the current window. CurrentWindow.minWidth([, length: number]) Returns minWidth value of the current window.","title":"minWidth"},{"location":"api/#minheight","text":"Gets/sets the minimum height of the current window. CurrentWindow.minHeight([, length: number]) Returns minHeight value of the current window.","title":"minHeight"},{"location":"api/#resizable","text":"Gets/sets resizability of the current window. CurrentWindow.resizable(shouldResize: boolean) Returns resizable value of the current window. Default true .","title":"resizable"},{"location":"api/#focusonstartup","text":"Gets/sets the whether the current window should be focused when started. CurrentWindow.focusOnStartup(shouldFocus: boolean) Returns focusOnStartup value of the current window. Note This method is only available as a configuration option in a subsequent window created by Window.create()","title":"focusOnStartup"},{"location":"api/#hideintaskbar","text":"Gets/sets whether the current window should be displayed in the taskbar. CurrentWindow.hideInTaskbar(shouldHideInTaskbar: boolean) Returns hideInTaskbar value of the current window. Default false .","title":"hideInTaskbar"},{"location":"api/#hideonstartup","text":"Gets/sets whether the current window should be hidden on window startup. CurrentWindow.hideOnStartup(shouldHideOnStartup: boolean) Returns hideOnStartup value of the current window. Default false .","title":"hideOnStartup"},{"location":"api/#startupfromcenter","text":"Gets/sets whether the current window should be centerized. CurrentWindow.startupFromCenter(shouldStartupFromCenter: boolean) Returns startupFromCenter value of the current window. Default true .","title":"startupFromCenter"},{"location":"api/#state","text":"Gets/sets the current window state which could be one of: 'normal' 'maximized' 'minimized' CurrentWindow.state(state: string) Returns state value of the current window. Default 'normal' .","title":"state"},{"location":"api/#frameless","text":"Gets/sets whether the current window should have no outer frame. CurrentWindow.frameless(shouldSetFrameless: boolean) Returns frameless value of the current window. Default 'false' .","title":"frameless"},{"location":"api/#activate","text":"Gets/sets whether the current window should be activated. CurrentWindow.activate(shouldActivate: boolean) Returns activate value of the current window. Default 'true' .","title":"activate"},{"location":"api/#focus","text":"Gets/sets whether the current window should have a focus. CurrentWindow.focus(shouldSetFocus: boolean) Returns focus value of the current window. Default 'true' .","title":"focus"},{"location":"api/#hide","text":"Gets/sets whether the current window should be hidden. CurrentWindow.hide(shouldBeHidden: boolean) Returns hide value of the current window. Default 'false' .","title":"hide"},{"location":"api/#show","text":"Gets/sets whether the current window should be displayed once it's hidden. CurrentWindow.show(shouldShowAfterHide: boolean) Returns show value of the current window. Default 'true' .","title":"show"},{"location":"api/#window","text":"The Window class specifically handles calls to common tasks such as creating new windows that load a different application view, closing windows using numbered IDs and closing all windows.","title":"Window"},{"location":"api/#properties_1","text":"None.","title":"Properties"},{"location":"api/#methods_1","text":"","title":"Methods"},{"location":"api/#create","text":"Creates a new window with a new configuration. Window.create(newConfig: object) Returns Window (the new window created).","title":"create"},{"location":"api/#close_1","text":"Closes a window with the specified id . This means a window 5 levels deep can close another window that is 3 levels deep, for instance. All the values of id are indexed starting from 1. Window.close(id: string) Returns boolean . Default true .","title":"close"},{"location":"api/#closeall","text":"Closes all queued windows. Window.closeAll() Returns boolean . Default true .","title":"closeAll"},{"location":"api/#menubar","text":"The menubar is defined in the NodeJS end and is not dynamic. This means no mutations can occur on the menubar once it's set. It is responsible for creating a single menubar before the app starts. It cannot be accessed at runtime (check ContextMenu ). A simple example of a menubar: const { Menubar , Menu } = require ( macron ); module . exports = new Menubar ([ Menu . MenuItem ({ label : File , submenu : [ Menu . MenuItem ({ label : New File , click : function () { console . log ( require ( macron ). Dialog . filePicker ({ title : Pick file... , read : true , initialDirectoryPath : C:/Users/default/Desktop/macron_tests/ , fileTypes : [ [ All files , .* ], [ Text , .txt ], [ HTML , .html ], [ JavaScript , .js ], [ CSS , .css ], [ Markdown , .md ] ] }) ); }), Menu . MenuItem ({ label : New Window }), Menu . Seperator , Menu . MenuItem ({ label : Open File }), Menu . MenuItem ({ label : Open Folder }), Menu . Seperator , Menu . MenuItem ({ label : Open Recent , submenu : [ Menu . MenuItem ({ label : ./views/CodeEditor/index.js }), Menu . MenuItem ({ label : ../components/windows/MenuButton }), Menu . MenuItem ({ label : ./app/scripts/ }), Menu . MenuItem ({ label : ../static/img/logo.png }), Menu . MenuItem ({ label : ../projects/ }) ]}), Menu . Seperator , Menu . MenuItem ({ label : Auto Save , isCheckable : true , checked : true }) ] }), Menu . MenuItem ({ label : Edit , submenu : [ Menu . MenuItem ({ label : Word Wrap , isCheckable : true , click : function ( menuitem ) { console . log ( menuitem ) }}) ]}), Menu . MenuItem ({ label : Selection }), Menu . MenuItem ({ label : View }), Menu . MenuItem ({ label : Go , submenu : [ Menu . MenuItem ({ label : Share , icon : #xE72D; }), Menu . MenuItem ({ label : Copy }), Menu . MenuItem ({ label : Delete }), ]}), Menu . MenuItem ({ label : Debug }), Menu . MenuItem ({ label : Tasks }), Menu . MenuItem ({ label : Help }) ]);","title":"Menubar"},{"location":"api/#menu","text":"Acts as a container for the menu items and seperator.","title":"Menu"},{"location":"api/#properties_2","text":"","title":"Properties"},{"location":"api/#menuseperator","text":"Creates a menu seperator. The seperator could appear differently according to the platform. Value: Object .","title":"Menu.Seperator"},{"location":"api/#methods_2","text":"","title":"Methods"},{"location":"api/#menumenuitem","text":"Creates a menu item. Menu.MenuItem(itemConfig: object) itemConfig could have any of the following options: label string - The title of the menu item. click function - Handler for the item's click event. Executed in the web context only. submenu array - List of Menu.MenuItem(itemConfig: object) items to display as children. Default is [] . isCheckable boolean - Whether the item specified can be checked. Default is false . checked boolean - Whether the item specified is checked. Can only work if itemConfig.isCheckable is defined. Default is false . Returns Object .","title":"Menu.MenuItem"},{"location":"api/#dialogs","text":"The dialogs are a single entity that manipulate all sorts of native popups with a simple common API.","title":"Dialogs"},{"location":"api/#properties_3","text":"None.","title":"Properties"},{"location":"api/#methods_3","text":"","title":"Methods"},{"location":"api/#filesaver","text":"Used to create a native file-saver dialog with some options. A simple example of a file saver dialog something like: require ( macron ). fileSaver ({ title : Save your file... , // Optional. Sets the title of the dialog window. name : build // Required. Name of file to save. initialDirectoryPath : ./dist/ , // Required. Describes where to save the file. defaultExtension : js , // Required. Extension to use to save file. fileTypes : [ [ JavaScript , .js ], [ JavaScript React , .jsx ], ] // Optional. Format to save file. }); Returns path to saved file.","title":"fileSaver"},{"location":"api/#filepicker","text":"Used to pick a file from a directory. require ( macron ). filePicker ({ title : Save your file... , // Optional. Sets the title of the dialog window. allowMultiPick : true // Required. Allows selection of multiple files to pick. initialDirectoryPath : ./dist/ , // Required. Describes where to save the file. read : false , // Optional. Whether this method should return the file contents of the picked file(s). Default false. fileTypes : [ [ JavaScript, (*.js, *.htc) ], [ JavaScript React (*.jsx) ] ] // Optional. Format to save file. }); Returns the path to the picked file. This path could then be used for other functionalities like reading a file to be displayed in an editor, etc.","title":"filePicker"},{"location":"api/#directorypicker","text":"Used to pick a directory. require ( macron ). directoryPicker ({ title : Select a path , // Optional. Sets the title of the dialog window initialDirectoryPath : ./dist/ , // Required. Describes where to pick the directory from. }); Returns the path to the selected directory.","title":"directoryPicker"},{"location":"api/#contextmenu","text":"The ContextMenu class is dynamic and can be accessed/mutated at runtime. The API is exactly the same as the Menubar API but the only difference is that ContextMenu can be overidden at any moment in the web context.","title":"ContextMenu"},{"location":"api/#example","text":"require ( macron ). ContextMenu . register ( #editor-body , [ Menu . MenuItem ({ label : Simple Item }), Menu . MenuItem ({ label : Auto Save , isCheckable : true , checked : true }) ]);","title":"Example"},{"location":"api/#properties_4","text":"None.","title":"Properties"},{"location":"api/#methods_4","text":"","title":"Methods"},{"location":"api/#register","text":"ContextMenu.register(queryString: string, menuItems: array) Registers a new ContextMenu instance on the DOM element with the specified queryString . This overrides the element's default context menu bound to the right click (if it does) and instantiates a context menu over the element. Returns the same ContextMenu instance.","title":"register"},{"location":"api/#system","text":"Contains information about the underlying machine's platform, architecture, build version, processor, release and other related information.","title":"System"},{"location":"api/#properties_5","text":"None","title":"Properties"},{"location":"api/#methods_5","text":"","title":"Methods"},{"location":"api/#getplatform","text":"Returns the platform the user's machine is running on or null . This could be one of: 'Windows' 'Linux' 'MacOSX'","title":"getPlatform"},{"location":"api/#getmachineversion","text":"Returns the version of the platform the user's machine is running on or null .","title":"getMachineVersion"},{"location":"api/#getmachinetype","text":"Returns the the user's machine type.","title":"getMachineType"},{"location":"api/#getnetworkname","text":"Returns the network name of the computer. Not to be confused with NodeJS.","title":"getNetworkName"},{"location":"api/#getprocessorname","text":"Returns the platform's processor name.","title":"getProcessorName"},{"location":"api/#getrelease","text":"Returns the platform's release.","title":"getRelease"},{"location":"api/#javaversion","text":"Returns the version interface for Java platforms Warning This method is expected to be deprecated in future versions since Macron is not expecting to support Java platforms.","title":"javaVersion"},{"location":"api/#win32version","text":"Provides extra information on the Windows Registry. Returns an array of: OS release Version number CSD level (service pack) OS type (single/multi processor)","title":"win32Version"},{"location":"api/#macversion","text":"Returns version of MacOS on the user's computer.","title":"macVersion"},{"location":"api/#libcversion","text":"Returns version of Linux on the user's computer.","title":"libcVersion"},{"location":"api/#filesystem","text":"The FileSystem API extensively covers all the needs for rapid file prototyping. Common methods for reading, writing, updating, searching, copying and replacing files are defined. However, more intricate functionalities such as file watching are omitted to avoid unnecessary side effects to the general performance. Note Even so, these functionalities are available as plugins. Plugins are expected to make their way to Macron in the coming versions.","title":"FileSystem"},{"location":"api/#properties_6","text":"None","title":"Properties"},{"location":"api/#methods_6","text":"Warning All FileSystem methods are synchronous. You could create an asynchronous wrapper over the FileSystem class to gain non-blocking I/O.","title":"Methods"},{"location":"api/#readfile","text":"readFile(path: string) Reads a file's contents and returns it.","title":"readFile"},{"location":"api/#writefile","text":"Write contents to a file. writeFile(path: string, contents: string) Returns void","title":"writeFile"},{"location":"api/#appendfile","text":"Append contents to a file. appendFile(path: string, contents: string) Returns void","title":"appendFile"},{"location":"api/#clearfile","text":"Clear contents of a file. clearFile(path: string) Returns boolean .","title":"clearFile"},{"location":"api/#copyfile","text":"Copy file from a directory to another directory. copyFile(src: string, to: string) Returns void","title":"copyFile"},{"location":"api/#isfile","text":"Checks if the specified path is a file and returns true if the path is a file otherwise false . isFile(path: string) Returns boolean .","title":"isFile"},{"location":"api/#isdirectory","text":"Checks if the specified path is a directory and returns true if the path is a directory otherwise false . isDirectory(path: string) Returns boolean .","title":"isDirectory"},{"location":"api/#mkdir","text":"Creates a directory if the specified path does not exist. mkdir(path: string) Returns boolean .","title":"mkdir"},{"location":"api/#chdir","text":"Changes working directory into specified path. chdir(path: string) Returns boolean .","title":"chdir"},{"location":"api/#realpath","text":"Gets the absolute path of the specified path (usually a relative path). realpath(path: string) Returns string or null .","title":"realpath"},{"location":"api/#rename","text":"Renames a file to a specified new name. rename(oldName: string, newName: string) Returns void .","title":"rename"},{"location":"api/#unlink","text":"Removes specified file. unlink(path: string) Returns void .","title":"unlink"},{"location":"api/#rmdir","text":"Removes directory (with contents). rmdir(path: string) Returns void .","title":"rmdir"},{"location":"api/#rmdirempty","text":"Removes directory if it is empty. rmdirEmpty(path: string) Returns void . Note unlink , rmdir and rmdirEmpty remove items permanently (with no cache). Do not use any if you need to do a temporary file-removal action.","title":"rmdirEmpty"},{"location":"api/#readdir","text":"Reads contents of directory. readDir(path: string) Returns array .","title":"readDir"},{"location":"api/#readdirglob","text":"Read contents of directory with advanced Unix file patterns. For instance: '*.js' - Matches all files that have a . js extension. '/macron/*.cpp' - Matches all files that have a . cpp extension in a macron folder. readDirGlob(path: string, pattern: string) Returns array .","title":"readDirGlob"},{"location":"build/","text":"Building Deploying Coming soon... (propably within the day - 6 Oct 2018)","title":"Building & Deploying"},{"location":"build/#building-deploying","text":"Coming soon... (propably within the day - 6 Oct 2018)","title":"Building &amp; Deploying"},{"location":"contributing/","text":"Contributing Guide This section covers all the necessary details to be able to contribute to Macron as an individual or team. Please make sure to cover this section at least once before actively contributing to Macron. When contributing to this project, please first discuss the change you wish to make via issue, email, or any other method with the owners of this project before making a change. Note we have a code of conduct. Please follow it in all your interactions with the project. Pull Request Process Ensure any install or build dependencies are removed before the end of the layer when doing a build. Update the README.md with details of the changes to the interface, this includes new environment variables, exposed ports, useful file locations and container parameters. Increase the version numbers in any example files and the README.md to the new version that this Pull Request would represent. For your Pull Request to be merged, it atleast needs to have the sign-off of two other contributors along with the approval of the authors ( @bukharim96 and @undefinedbuddy ). Code of Conduct Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at macron . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution This Code of Conduct is adapted from the Contributor Covenant, version 1.4","title":"Contributing Guide"},{"location":"contributing/#contributing-guide","text":"This section covers all the necessary details to be able to contribute to Macron as an individual or team. Please make sure to cover this section at least once before actively contributing to Macron. When contributing to this project, please first discuss the change you wish to make via issue, email, or any other method with the owners of this project before making a change. Note we have a code of conduct. Please follow it in all your interactions with the project.","title":"Contributing Guide"},{"location":"contributing/#pull-request-process","text":"Ensure any install or build dependencies are removed before the end of the layer when doing a build. Update the README.md with details of the changes to the interface, this includes new environment variables, exposed ports, useful file locations and container parameters. Increase the version numbers in any example files and the README.md to the new version that this Pull Request would represent. For your Pull Request to be merged, it atleast needs to have the sign-off of two other contributors along with the approval of the authors ( @bukharim96 and @undefinedbuddy ).","title":"Pull Request Process"},{"location":"contributing/#code-of-conduct","text":"","title":"Code of Conduct"},{"location":"contributing/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"contributing/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"contributing/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"contributing/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"contributing/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at macron . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"contributing/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant, version 1.4","title":"Attribution"},{"location":"getting-started/","text":"Getting Started Macron is a light framework for building cross-platform desktop applications with JavaScript, HTML and CSS using the system's native web engine. It does so by creating a single thread where all static content runs alongside native modules tailored for rapid development. To learn more about Macron, check the homepage or the Under The Hood . As far as you need to get up and running, you will only need a single configuration file to make things happen. This section will get you covered with all the basic commands to start, serve and build a full Macron application in a few simple steps. Prerequisites To get up and running with Macron, your machine will need to meet some requirements. Macron uses different approaches for creating applications on different platforms. For this reason, you need to install the independent software dependencies for your particular machine. Windows MacOS Linux NodeJS =8.11.3 Yes N/A N/A Python =3.31 Yes N/A N/A Pip =9.0.1 Yes N/A N/A winshell Yes N/A N/A WPF Yes N/A N/A pythonnet Yes N/A N/A pyinstaller =3.4 Yes N/A N/A pygubu Yes N/A N/A Warning We currently support Windows only. A MacOS and Linux version is expected to come soon. Previous versions of Node are not battle-tested so the table above is susceptible to changes. Installation No extra requirements are needed for this process since all the requirements are expected to be covered. With NodeJS installed, run: npm install -g macron The following commands show how to get started quickly. macron init [app-name] - Create a new Macron project. Run this command without app-name to initialize Macron in the current directory. macron start - Starts the application. Creates windows in a new thread. macron build - Builds a stable application. Learn more . macron deploy - Creates final build of your app and setup wizard. Learn more . macron --help - Run this command to revisit commands and receive further help with your application. Project layout When you run the macron init command, you will get a few files. The most important of these is the macron.config.js configuration file which we will cover in a moment. Traditionally, the general project layout is defined in the following order even though it is not opinionated at all: public/ icons/ icon.ico # Windows only (for now) index.html # The entry point to the application src/ # All application logic and backend macron.config.js # The configuration file Macron configuration endpoint The macron.config.js is a single entry point for handling general application settings. It contains several options for managing how the main window start ups (maximized, fixed width, etc.) and how the build is created. After a successful initialization, the configurations are passed on to the native end where the main window of your app is created. Check the Under The Hood section for a detailed explanation of the process. const { Window } = require ( macron ); const App = new Window ({ title : MyFirstMacronWindow , width : 1200 , height : 960 , minHeight : 500 , minWidth : 500 , maxHeight : 500 , maxWidth : 500 , frameless : true , startupFromCenter : true , // startupState: maximized , devServerURI : http://localhost:3000/ , menu : require ( ./src/menubar ) }); module . exports = { name : MyCoolApp , mainWindow : App , build : { debugMode : false } } Configuration options The Window object entails and generates a ready-made API endpoint that is used by the native end to create a platform-specific window. This is the root of your application and can be built at any given moment into a stable application with a setup wizard that could be distributed. The following options are available for any configuration and only apply to the main window: title string - Required. The statusbar title. width number - The window width. height number - The window height. minHeight number - The minimum window height. minWidth number - The minimum window width. maxHeight number - The maximum window height. maxWidth number - The maximum window width. frameless boolean - Removes outer frame from window if true . Default is false . startupFromCenter boolean - Determines whether window should appear in the center if true . If set to false , the platform decides where to draw the window. Default is true . startupState string - Default 'normal' . Could be either: 'maximized' - Window starts in a maximized state. 'minimized' - Window starts in a minimized state. 'normal' - Window starts in a state described by the platform. devServerURI string - Specifies a local or online URL source to start the app. Overrides sourcePath if defined. menu MacronMenubar - A pointer to the app's menubar. Tip All the options are inserted into the global window context as macron.CurrentWindow and can all be accessed as dynamic setters and getters which means a script could mutate any of these properties. Setting a single minWidth and maxWidth alongside a single minHeight and maxHeight will result in a window that cannot be resized. Building your app adds some extra options to the macron.config.js for the build process and is covered in the Build Deploy section. Taking your app to the next level with native modules Macron uses the Python runtime to access native functionalities of the platform. These functionalities are then curated into a common form that can be recognized by Macron's NativeBridge class. The modules then get bundled with an app and can get accessed at runtime. Accessing core modules Since desktop apps are expected to have a lot of behaviour, Macron makes use of Python's core modules to generate a set of APIs that can be accessed at runtime. Some of those APIs include FileSystem , Process and more. Check out the API Reference section for more on core modules. Example The example below demonstrates the process of using the FileSystem API to set and get the contents of a ' pupp.txt ' file. const { FileSystem } = require ( macron ); const originalContents = I \ud83d\udc95 \ud83d\udc36 ; FileSystem . writeFile ( ./pupps.txt , originalContents ); alert ( FileSystem . readFile ( ./pupps.txt ) === originalContents ) // pass Building your app for deployment If you went along with this mini-tutorial from the start, you are on the right track. The next step is to build your awesome app into something quite interactable that can be used by your users. To build your app, run: macron build ... in your project directory. Once your app is built, run: macron start build ... to execute your build. For more on building and deploying your app, check the Building Deploying section.","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"Macron is a light framework for building cross-platform desktop applications with JavaScript, HTML and CSS using the system's native web engine. It does so by creating a single thread where all static content runs alongside native modules tailored for rapid development. To learn more about Macron, check the homepage or the Under The Hood . As far as you need to get up and running, you will only need a single configuration file to make things happen. This section will get you covered with all the basic commands to start, serve and build a full Macron application in a few simple steps.","title":"Getting Started"},{"location":"getting-started/#prerequisites","text":"To get up and running with Macron, your machine will need to meet some requirements. Macron uses different approaches for creating applications on different platforms. For this reason, you need to install the independent software dependencies for your particular machine. Windows MacOS Linux NodeJS =8.11.3 Yes N/A N/A Python =3.31 Yes N/A N/A Pip =9.0.1 Yes N/A N/A winshell Yes N/A N/A WPF Yes N/A N/A pythonnet Yes N/A N/A pyinstaller =3.4 Yes N/A N/A pygubu Yes N/A N/A Warning We currently support Windows only. A MacOS and Linux version is expected to come soon. Previous versions of Node are not battle-tested so the table above is susceptible to changes.","title":"Prerequisites"},{"location":"getting-started/#installation","text":"No extra requirements are needed for this process since all the requirements are expected to be covered. With NodeJS installed, run: npm install -g macron The following commands show how to get started quickly. macron init [app-name] - Create a new Macron project. Run this command without app-name to initialize Macron in the current directory. macron start - Starts the application. Creates windows in a new thread. macron build - Builds a stable application. Learn more . macron deploy - Creates final build of your app and setup wizard. Learn more . macron --help - Run this command to revisit commands and receive further help with your application.","title":"Installation"},{"location":"getting-started/#project-layout","text":"When you run the macron init command, you will get a few files. The most important of these is the macron.config.js configuration file which we will cover in a moment. Traditionally, the general project layout is defined in the following order even though it is not opinionated at all: public/ icons/ icon.ico # Windows only (for now) index.html # The entry point to the application src/ # All application logic and backend macron.config.js # The configuration file","title":"Project layout"},{"location":"getting-started/#macron-configuration-endpoint","text":"The macron.config.js is a single entry point for handling general application settings. It contains several options for managing how the main window start ups (maximized, fixed width, etc.) and how the build is created. After a successful initialization, the configurations are passed on to the native end where the main window of your app is created. Check the Under The Hood section for a detailed explanation of the process. const { Window } = require ( macron ); const App = new Window ({ title : MyFirstMacronWindow , width : 1200 , height : 960 , minHeight : 500 , minWidth : 500 , maxHeight : 500 , maxWidth : 500 , frameless : true , startupFromCenter : true , // startupState: maximized , devServerURI : http://localhost:3000/ , menu : require ( ./src/menubar ) }); module . exports = { name : MyCoolApp , mainWindow : App , build : { debugMode : false } }","title":"Macron configuration endpoint"},{"location":"getting-started/#configuration-options","text":"The Window object entails and generates a ready-made API endpoint that is used by the native end to create a platform-specific window. This is the root of your application and can be built at any given moment into a stable application with a setup wizard that could be distributed. The following options are available for any configuration and only apply to the main window: title string - Required. The statusbar title. width number - The window width. height number - The window height. minHeight number - The minimum window height. minWidth number - The minimum window width. maxHeight number - The maximum window height. maxWidth number - The maximum window width. frameless boolean - Removes outer frame from window if true . Default is false . startupFromCenter boolean - Determines whether window should appear in the center if true . If set to false , the platform decides where to draw the window. Default is true . startupState string - Default 'normal' . Could be either: 'maximized' - Window starts in a maximized state. 'minimized' - Window starts in a minimized state. 'normal' - Window starts in a state described by the platform. devServerURI string - Specifies a local or online URL source to start the app. Overrides sourcePath if defined. menu MacronMenubar - A pointer to the app's menubar. Tip All the options are inserted into the global window context as macron.CurrentWindow and can all be accessed as dynamic setters and getters which means a script could mutate any of these properties. Setting a single minWidth and maxWidth alongside a single minHeight and maxHeight will result in a window that cannot be resized. Building your app adds some extra options to the macron.config.js for the build process and is covered in the Build Deploy section.","title":"Configuration options"},{"location":"getting-started/#taking-your-app-to-the-next-level-with-native-modules","text":"Macron uses the Python runtime to access native functionalities of the platform. These functionalities are then curated into a common form that can be recognized by Macron's NativeBridge class. The modules then get bundled with an app and can get accessed at runtime.","title":"Taking your app to the next level with native modules"},{"location":"getting-started/#accessing-core-modules","text":"Since desktop apps are expected to have a lot of behaviour, Macron makes use of Python's core modules to generate a set of APIs that can be accessed at runtime. Some of those APIs include FileSystem , Process and more. Check out the API Reference section for more on core modules.","title":"Accessing core modules"},{"location":"getting-started/#example","text":"The example below demonstrates the process of using the FileSystem API to set and get the contents of a ' pupp.txt ' file. const { FileSystem } = require ( macron ); const originalContents = I \ud83d\udc95 \ud83d\udc36 ; FileSystem . writeFile ( ./pupps.txt , originalContents ); alert ( FileSystem . readFile ( ./pupps.txt ) === originalContents ) // pass","title":"Example"},{"location":"getting-started/#building-your-app-for-deployment","text":"If you went along with this mini-tutorial from the start, you are on the right track. The next step is to build your awesome app into something quite interactable that can be used by your users. To build your app, run: macron build ... in your project directory. Once your app is built, run: macron start build ... to execute your build. For more on building and deploying your app, check the Building Deploying section.","title":"Building your app for deployment"},{"location":"releases/","text":"Release Notes This is a summary of new features, bug fixes and improvements that were made to Macron alongside each release. The updates are listed in reverse chronological order (the most recent is listed first). v0.2.0 (beta) October 6, 2018 Open sourced Macron (first release)","title":"Release Notes"},{"location":"releases/#release-notes","text":"This is a summary of new features, bug fixes and improvements that were made to Macron alongside each release. The updates are listed in reverse chronological order (the most recent is listed first).","title":"Release Notes"},{"location":"releases/#v020-beta-october-6-2018","text":"Open sourced Macron (first release)","title":"v0.2.0 (beta)"},{"location":"troubleshooting/","text":"Troubleshooting Coming soon...","title":"Troubleshooting"},{"location":"troubleshooting/#troubleshooting","text":"Coming soon...","title":"Troubleshooting"},{"location":"under-the-hood/","text":"Under The Hood This section covers (in detail) the whole process of generating apps with Macron excluding the build process. Check the Building Deploying section for details on the build step. Warning If you haven't taken a look at the Getting Started section, this section isn't relevant to you. Please proceed with the previous sections to understand Macron up to this point. Details coming soon...","title":"Under The Hood"},{"location":"under-the-hood/#under-the-hood","text":"This section covers (in detail) the whole process of generating apps with Macron excluding the build process. Check the Building Deploying section for details on the build step. Warning If you haven't taken a look at the Getting Started section, this section isn't relevant to you. Please proceed with the previous sections to understand Macron up to this point. Details coming soon...","title":"Under The Hood"}]}